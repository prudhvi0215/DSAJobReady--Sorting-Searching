//Brute approach

class Solution {
public:
    int search(vector<int>& nums, int target) {
        
        if(nums.size()==0){
            return -1;
        }
        
        int start = 0;
        int stop = nums.size()-1;
        
        while(stop >= start)
        {
            if(nums[start] == target){
                return start;
            }
            
            if(nums[stop]==target){
                return stop;
            }
            
            ++start;
            --stop;
        }
        
        return -1;
    }
};


//Optimal Approach

class Solution {
public:
    
    
    int binarySearch(vector<int> &nums,int low,int high,int target)
    {
        if(high<low){
            return -1;
        }
        
        int mid = low + (high-low)/2;
        
        if(nums[mid]==target){
            return mid;
        }
        
        if(nums[mid]>target){
            return binarySearch(nums,low,mid-1,target);
        }
        
        return binarySearch(nums,mid+1,high,target);
    }
    
    
    int findPivot(vector<int> &nums, int low,int high)
    {
        if(high<low){
            return -1;
        }
        
        if(low==high){
            return low;
        }
        
        
        int mid = low + (high-low)/2;
        
        if(mid<high && nums[mid]>nums[mid+1]){
            return mid;
        }
        
        if(mid>low && nums[mid]<nums[mid-1]){
            return (mid-1);
        }
        
        
        if(nums[low]>=nums[mid]){
            return findPivot(nums,low,mid-1);
        }
        
        return findPivot(nums,mid+1,high);
    }
    

    
    int search(vector<int>& nums, int target) {
        
        int pivotIndex = findPivot(nums,0,nums.size()-1);
        
        if(pivotIndex == -1){
            return binarySearch(nums,0,nums.size()-1,target);
        }
        
        if(nums[pivotIndex] == target){
            return pivotIndex;
        }
        
        if(nums[0] <= target){
            return binarySearch(nums,0,pivotIndex-1,target);
        }
        
        return binarySearch(nums,pivotIndex+1,nums.size()-1,target);
    }
};
